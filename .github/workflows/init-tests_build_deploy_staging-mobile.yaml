name: init-tests_build_deploy_staging-mobile

on:
  repository_dispatch:
    types: [deploy-to-init-project]
  workflow_dispatch:

jobs:
  tests_build_deploy:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js to latest version LTS and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies for project
        run: npm install

      - name: Lint TypeScript and ESLint for project
        run: npm run lint:eslint && npm run lint:ts

      - name: Run Unit Tests and E2E Tests
        run: npm run test:unit:staging # && npm run test:e2e

      - name: Build with Capacitor, Generate AAB and Sign - Android
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEYSTORE_ALIAS_NAME: ${{ secrets.ANDROID_KEYSTORE_ALIAS_NAME }}
          ANDROID_KEYSTORE_KEY_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_KEY_PASSWORD }}
        run: |
          chmod +x android/gradlew
          npm run mobile:build:android:staging -- \
          --keystorepath android.keystore \
          --keystorepass "$ANDROID_KEYSTORE_PASSWORD" \
          --keystorealias "$ANDROID_KEYSTORE_ALIAS_NAME" \
          --keystorealiaspass "$ANDROID_KEYSTORE_KEY_PASSWORD" \
          --androidreleasetype AAB

      - name: Install the Apple Certificate and Provisioning Profile (Apple Distribution) - AppStore / TestFlight - iOS
        if: ${{ matrix.platform == 'macos-latest' }}
        env:
          # Certificat Apple au format p12 encodé en base64
          IOSMACOS_APPLE_CERTIFICATE_APPLEDISTRIBUTION_P12_BASE64: ${{ secrets.IOSMACOS_APPLE_CERTIFICATE_APPLEDISTRIBUTION_P12_BASE64 }}
          # Mot de passe du certificat apple au format p12
          IOSMACOS_APPLE_CERTIFICATE_APPLEDISTRIBUTION_P12_PASSWORD: ${{ secrets.IOSMACOS_APPLE_CERTIFICATE_APPLEDISTRIBUTION_P12_PASSWORD }}
          # Profil de provisionnement Apple au format : *.mobileprovision encodé en base64
          # TODO: A modifier pour chaque nouvelle application iOS pour : secrets.IOS_APPLE_PROVISIONING_PROFILE_APPLEDISTRIBUTION_FLAPIEXAMPLEAPP_BASE64
          IOSMACOS_APPLE_PROVISIONING_PROFILE_APPLEDISTRIBUTION_BASE64: ${{ secrets.IOS_APPLE_PROVISIONING_PROFILE_APPLEDISTRIBUTION_FLAPIEXAMPLEAPP_BASE64 }}
          # Un nouveau trousseau sera créé sur le coureur, de sorte que le mot de passe du nouveau trousseau, peut être n'importe quelle nouvelle chaîne aléatoire
          APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$IOSMACOS_APPLE_CERTIFICATE_APPLEDISTRIBUTION_P12_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$IOSMACOS_APPLE_PROVISIONING_PROFILE_APPLEDISTRIBUTION_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$APPLE_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$APPLE_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$IOSMACOS_APPLE_CERTIFICATE_APPLEDISTRIBUTION_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$APPLE_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles
          cp $PP_PATH ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles

      - name: Setup Xcode and Setup Command Line Tools - iOS
        if: ${{ matrix.platform == 'macos-latest' }}
        # https://github.com/actions/runner-images/blob/main/images/macos/macos-14-Readme.md
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2.0'

     # - name: Determine SDK Path and set SDKROOT - iOS
     #   if: ${{ matrix.platform == 'macos-latest' }}
     #   run: |
     #    SDKROOT=$(xcrun --sdk iphoneos --show-sdk-path)
     #     echo "SDKROOT=$SDKROOT" >> $GITHUB_ENV

      - name: Disable automatic signing in Xcode project
        if: ${{ matrix.platform == 'macos-latest' }}
        run: |
          cd ios/App
          sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' App.xcodeproj/project.pbxproj
          sed -i '' 's/DevelopmentTeam = "";$/DevelopmentTeam = "${{ secrets.APPLE_TEAM_ID }}";/g' App.xcodeproj/project.pbxproj

      - name: Build with Capacitor - iOS
        if: ${{ matrix.platform == 'macos-latest' }}
        run: xcodebuild -workspace './ios/App/App.xcworkspace' -scheme App -destination generic/platform=iOS -archivePath App.xcarchive archive && ls -la

      - name: Verify if .app is signed - iOS
        if: ${{ matrix.platform == 'macos-latest' }}
        run: codesign --verify --deep --verify --verbose=4 path/to/*.app

      - name: Create package .ipa for AppStore/TestFlight - iOS
        if: ${{ matrix.platform == 'macos-latest' }}
        run: |
          # Create Payload directory and move .app into it
          mkdir Payload
          cp -a path/to/*.app Payload/

          # Recuperer le nom du fichier .app pour avoir le même nom pour le .ipa, puis zip le Payload dans un .ipa
          APP_NAME=$(basename Payload/*.app .app)
          zip -ry $APP_NAME.ipa Payload/

          # Move .ipa to build directory
          mv $APP_NAME.ipa path/to/build/

      - name: Verify if .ipa is valid with altool - iOS
        if: ${{ matrix.platform == 'macos-latest' }}
        run: |
          xcrun altool --validate-app --file path/to/*.ipa --type ios --username ${{ secrets.APPLE_ID }} --password ${{ secrets.APPLE_APPLICATION_SPECIFIC_PASSWORD }}

      - name: Upload Build Artifact
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: android-aab
          path: android/app/build/outputs/bundle/**/*.aab

      - name: Upload iOS Archive
        if: ${{ matrix.platform == 'macos-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: ios-archive
          path: ios/App.xcarchive
